# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ModelData

    ModelData(;
        id=nothing,
        name=nothing,
        publisher=nothing,
        summary=nothing,
        rate_limit_tier=nothing,
        tags=nothing,
        supported_input_modalities=nothing,
        supported_output_modalities=nothing,
    )

    - id::String : The unique identifier for the model
    - name::String : The name of the model
    - publisher::String : The publisher of the model
    - summary::String : A brief summary of the model&#39;s capabilities
    - rate_limit_tier::String : The rate limit tier for the model
    - tags::Vector{String} : A list of tags associated with the model
    - supported_input_modalities::Vector{String} : A list of input modalities supported by the model
    - supported_output_modalities::Vector{String} : A list of output modalities supported by the model
"""
Base.@kwdef mutable struct ModelData <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    publisher::Union{Nothing, String} = nothing
    summary::Union{Nothing, String} = nothing
    rate_limit_tier::Union{Nothing, String} = nothing
    tags::Union{Nothing, Vector{String}} = nothing
    supported_input_modalities::Union{Nothing, Vector{String}} = nothing
    supported_output_modalities::Union{Nothing, Vector{String}} = nothing

    function ModelData(id, name, publisher, summary, rate_limit_tier, tags, supported_input_modalities, supported_output_modalities, )
        o = new(id, name, publisher, summary, rate_limit_tier, tags, supported_input_modalities, supported_output_modalities, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ModelData

const _property_types_ModelData = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("publisher")=>"String", Symbol("summary")=>"String", Symbol("rate_limit_tier")=>"String", Symbol("tags")=>"Vector{String}", Symbol("supported_input_modalities")=>"Vector{String}", Symbol("supported_output_modalities")=>"Vector{String}", )
OpenAPI.property_type(::Type{ ModelData }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ModelData[name]))}

function OpenAPI.check_required(o::ModelData)
    true
end

function OpenAPI.validate_properties(o::ModelData)
    OpenAPI.validate_property(ModelData, Symbol("id"), o.id)
    OpenAPI.validate_property(ModelData, Symbol("name"), o.name)
    OpenAPI.validate_property(ModelData, Symbol("publisher"), o.publisher)
    OpenAPI.validate_property(ModelData, Symbol("summary"), o.summary)
    OpenAPI.validate_property(ModelData, Symbol("rate_limit_tier"), o.rate_limit_tier)
    OpenAPI.validate_property(ModelData, Symbol("tags"), o.tags)
    OpenAPI.validate_property(ModelData, Symbol("supported_input_modalities"), o.supported_input_modalities)
    OpenAPI.validate_property(ModelData, Symbol("supported_output_modalities"), o.supported_output_modalities)
end

function OpenAPI.validate_property(::Type{ ModelData }, name::Symbol, val)








end
