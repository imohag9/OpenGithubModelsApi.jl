var documenterSearchIndex = {"docs":
[{"location":"#OpenGithubModelsApi","page":"Home","title":"OpenGithubModelsApi","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OpenGithubModelsApi.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#OpenGithubModelsApi.get_all_models-Tuple{}","page":"Home","title":"OpenGithubModelsApi.get_all_models","text":"get_all_models(; token_suffix::String=\"\")\n\nLists all available models.\n\nArguments\n\ntoken_suffix::String: Suffix for the API key environment variable.\n\nReturns\n\nVector{ModelData}: A vector of available models.\n\n\n\n\n\n","category":"method"},{"location":"#OpenGithubModelsApi.get_api_key-Tuple{}","page":"Home","title":"OpenGithubModelsApi.get_api_key","text":"get_api_key(; suffix::String=\"\")\n\nGets the API key from the environment variables.\n\nArguments\n\nsuffix::String: Suffix for the API key environment variable.\n\nReturns\n\nString: The API key.\n\nThrows\n\nError: If the API key environment variable is not set.\n\n\n\n\n\n","category":"method"},{"location":"#OpenGithubModelsApi.inference_req-Tuple{OpenGithubModelsApi.APIClient.InferenceRequest}","page":"Home","title":"OpenGithubModelsApi.inference_req","text":"inference_req(request::InferenceRequest; verbose::Bool=false, token_suffix::String=\"\")\n\nCreates a chat completion.\n\nArguments\n\nrequest::InferenceRequest: The inference request.\nverbose::Bool: Whether to return the full result or just the content.\ntoken_suffix::String: Suffix for the API key environment variable.\n\nReturns\n\nAny: The inference response.\n\n\n\n\n\n","category":"method"},{"location":"#OpenGithubModelsApi.org_inference_req-Tuple{OpenGithubModelsApi.APIClient.InferenceRequest, String}","page":"Home","title":"OpenGithubModelsApi.org_inference_req","text":"org_inference_req(request::InferenceRequest, org::String; verbose::Bool=false, token_suffix::String=\"\")\n\nCreates a chat completion for a given organization.\n\nArguments\n\nrequest::InferenceRequest: The inference request.\norg::String: The organization name.\nverbose::Bool: Whether to return the full result or just the content.\ntoken_suffix::String: Suffix for the API key environment variable.\n\nReturns\n\nAny: The inference response.\n\n\n\n\n\n","category":"method"},{"location":"#OpenGithubModelsApi.APIClient.Function_Params","page":"Home","title":"OpenGithubModelsApi.APIClient.Function_Params","text":"Function_Params\n\nFunction_Params(;\n    name=nothing,\n    description=nothing,\n    parameters=nothing,\n)\n\n- name::String : The name of the function to be called.\n- description::String : A description of what the function does. The model will use this description when selecting the function and interpreting its parameters.\n- parameters::A Json Object that describes the function params\n\n\n\n\n\n","category":"type"},{"location":"#OpenGithubModelsApi.APIClient.InferenceRequest","page":"Home","title":"OpenGithubModelsApi.APIClient.InferenceRequest","text":"InferenceRequest\n\nInferenceRequest(;\n    model=nothing,\n    messages=nothing,\n    frequency_penalty=nothing,\n    max_tokens=nothing,\n    modalities=nothing,\n    presence_penalty=nothing,\n    response_format=nothing,\n    seed=nothing,\n    stream=false,\n    stream_options=nothing,\n    stop=nothing,\n    temperature=nothing,\n    tool_choice=nothing,\n    tools=nothing,\n    top_p=nothing,\n)\n\n- model::String : ID of the specific model to use for the request. The model ID should be in the format of {publisher}/{model_name} where \\&quot;openai/gpt-4.1\\&quot; is an example of a model ID. You can find supported models in the catalog/models endpoint.\n- messages::Vector{Message} : The collection of context messages associated with this chat completion request. Typical usage begins with a chat message for the System role that provides instructions for the behavior of the assistant, followed by alternating messages between the User and Assistant roles.\n- frequency_penalty::Float64 : A value that influences the probability of generated tokens appearing based on their cumulative frequency in generated text. Positive values will make tokens less likely to appear as their frequency increases and decrease the likelihood of the model repeating the same statements verbatim. Supported range is [-2, 2].\n- max_tokens::Int64 : The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model&#39;s context length. For example, if your prompt is 100 tokens and you set max_tokens to 50, the API will return a completion with a maximum of 50 tokens.\n- modalities::Vector{String} : The modalities that the model is allowed to use for the chat completions response. The default modality is text. Indicating an unsupported modality combination results in a 422 error. Supported values are: text, audio \n- presence_penalty::Float64 : A value that influences the probability of generated tokens appearing based on their existing presence in generated text. Positive values will make tokens less likely to appear when they already exist and increase the model&#39;s likelihood to output new tokens. Supported range is [-2, 2].\n- response_format::InferenceRequestResponseFormat\n- seed::Int64 : If specified, the system will make a best effort to sample deterministically such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed.\n- stream::Bool : A value indicating whether chat completions should be streamed for this request.\n- stream_options::InferenceRequestStreamOptions\n- stop::Vector{String} : A collection of textual sequences that will end completion generation.\n- temperature::Float64 : The sampling temperature to use that controls the apparent creativity of generated completions. Higher values will make output more random while lower values will make results more focused and deterministic. It is not recommended to modify temperature and top_p for the same completion request as the interaction of these two settings is difficult to predict. Supported range is [0, 1]. Decimal values are supported.\n- tool_choice::String : If specified, the model will configure which of the provided tools it can use for the chat completions response.\n- tools::Vector{InferenceRequestToolsInner} : A list of tools the model may request to call. Currently, only functions are supported as a tool. The model may respond with a function call request and provide the input arguments in JSON format for that function.\n- top_p::Float64 : An alternative to sampling with temperature called nucleus sampling. This value causes the model to consider the results of tokens with the provided probability mass. As an example, a value of 0.15 will cause only the tokens comprising the top 15% of probability mass to be considered. It is not recommended to modify temperature and top_p for the same request as the interaction of these two settings is difficult to predict. Supported range is [0, 1]. Decimal values are supported.\n\n\n\n\n\n","category":"type"},{"location":"#OpenGithubModelsApi.APIClient.InferenceRequestResponseFormat","page":"Home","title":"OpenGithubModelsApi.APIClient.InferenceRequestResponseFormat","text":"InferenceRequestresponseformat\n\nInferenceRequestResponseFormat(;\n    type=nothing,\n    json_schema=nothing,\n)\n\n- type::String : The type of the response.\n- json_schema::Any : The JSON schema for the response.\n\n\n\n\n\n","category":"type"},{"location":"#OpenGithubModelsApi.APIClient.InferenceRequestStreamOptions","page":"Home","title":"OpenGithubModelsApi.APIClient.InferenceRequestStreamOptions","text":"InferenceRequeststreamoptions\n\nInferenceRequestStreamOptions(;\n    include_usage=false,\n)\n\n- include_usage::Bool : Whether to include usage information in the response.\n\n\n\n\n\n","category":"type"},{"location":"#OpenGithubModelsApi.APIClient.InferenceRequestToolsInner","page":"Home","title":"OpenGithubModelsApi.APIClient.InferenceRequestToolsInner","text":"InferenceRequesttoolsinner\n\nInferenceRequestToolsInner(;\n    call_function=nothing,\n    type=nothing,\n)\n\n- call_function::Function_Params\n- type::String\n\n\n\n\n\n","category":"type"},{"location":"#OpenGithubModelsApi.APIClient.InferenceResponse","page":"Home","title":"OpenGithubModelsApi.APIClient.InferenceResponse","text":"InferenceResponse\n\nInferenceResponse(;\n    choices=nothing,\n    data=nothing,\n)\n\n- choices::Vector{NonStreamingResponseChoices}\n- data::StreamingResponseData\n\n\n\n\n\n","category":"type"},{"location":"#OpenGithubModelsApi.APIClient.Message","page":"Home","title":"OpenGithubModelsApi.APIClient.Message","text":"InferenceRequestmessagesinner\n\nMessage(;\n    role=nothing,\n    content=nothing,\n)\n\n- role::String : The chat role associated with this message\n- content::String : The content of the message\n\n\n\n\n\n","category":"type"},{"location":"#OpenGithubModelsApi.APIClient.ModelData","page":"Home","title":"OpenGithubModelsApi.APIClient.ModelData","text":"ModelData\n\nModelData(;\n    id=nothing,\n    name=nothing,\n    publisher=nothing,\n    summary=nothing,\n    rate_limit_tier=nothing,\n    tags=nothing,\n    supported_input_modalities=nothing,\n    supported_output_modalities=nothing,\n)\n\n- id::String : The unique identifier for the model\n- name::String : The name of the model\n- publisher::String : The publisher of the model\n- summary::String : A brief summary of the model&#39;s capabilities\n- rate_limit_tier::String : The rate limit tier for the model\n- tags::Vector{String} : A list of tags associated with the model\n- supported_input_modalities::Vector{String} : A list of input modalities supported by the model\n- supported_output_modalities::Vector{String} : A list of output modalities supported by the model\n\n\n\n\n\n","category":"type"},{"location":"#OpenGithubModelsApi.APIClient.NonStreamingResponseChoices","page":"Home","title":"OpenGithubModelsApi.APIClient.NonStreamingResponseChoices","text":"NonStreamingResponse_choices\n\nNonStreamingResponseChoices(;\n    message=nothing,\n)\n\n- message::NonStreamingResponseMessage\n\n\n\n\n\n","category":"type"},{"location":"#OpenGithubModelsApi.APIClient.NonStreamingResponseMessage","page":"Home","title":"OpenGithubModelsApi.APIClient.NonStreamingResponseMessage","text":"NonStreamingResponse_message The message associated with the completion.\n\nNonStreamingResponseMessage(;\n    content=nothing,\n    role=nothing,\n)\n\n- content::String : The content of the message.\n- role::String : The role of the message.\n\n\n\n\n\n","category":"type"},{"location":"#OpenGithubModelsApi.APIClient.StreamingResponseData","page":"Home","title":"OpenGithubModelsApi.APIClient.StreamingResponseData","text":"StreamingResponsedata Some details about the response.\n\nStreamingResponseData(;\n    choices=nothing,\n)\n\n- choices::Vector{StreamingResponseDataChoices}\n\n\n\n\n\n","category":"type"},{"location":"#OpenGithubModelsApi.APIClient.StreamingResponseDataChoices","page":"Home","title":"OpenGithubModelsApi.APIClient.StreamingResponseDataChoices","text":"StreamingResponsedata_choices\n\nStreamingResponseDataChoices(;\n    delta=nothing,\n)\n\n- delta::StreamingResponseDataDelta\n\n\n\n\n\n","category":"type"},{"location":"#OpenGithubModelsApi.APIClient.StreamingResponseDataDelta","page":"Home","title":"OpenGithubModelsApi.APIClient.StreamingResponseDataDelta","text":"StreamingResponsedata_delta Container for the content of the streamed response.\n\nStreamingResponseDataDelta(;\n    content=nothing,\n)\n\n- content::String : The content of the streamed response.\n\n\n\n\n\n","category":"type"},{"location":"#OpenGithubModelsApi.APIClient.basepath-Tuple{Type{OpenGithubModelsApi.APIClient.DefaultApi}}","page":"Home","title":"OpenGithubModelsApi.APIClient.basepath","text":"The default API base path for APIs in DefaultApi. This can be used to construct the OpenAPI.Clients.Client instance.\n\n\n\n\n\n","category":"method"},{"location":"#OpenGithubModelsApi.APIClient.create_chat_completion-Tuple{OpenGithubModelsApi.APIClient.DefaultApi, String, String, OpenGithubModelsApi.APIClient.InferenceRequest}","page":"Home","title":"OpenGithubModelsApi.APIClient.create_chat_completion","text":"Creates a chat completion.\n\nParams:\n\nauth_token::String (required)\napi_version::String (required)\ninference_request::InferenceRequest (required)\n\nReturn: InferenceResponse, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"#OpenGithubModelsApi.APIClient.create_org_chat_completion-Tuple{OpenGithubModelsApi.APIClient.DefaultApi, String, String, String, OpenGithubModelsApi.APIClient.InferenceRequest}","page":"Home","title":"OpenGithubModelsApi.APIClient.create_org_chat_completion","text":"Creates a chat completion for a given organization.\n\nParams:\n\norg::String (required)\nauth_token::String (required)\napi_version::String (required)\ninference_request::InferenceRequest (required)\n\nReturn: InferenceResponse, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"#OpenGithubModelsApi.APIClient.list_models-Tuple{OpenGithubModelsApi.APIClient.DefaultApi, String, String}","page":"Home","title":"OpenGithubModelsApi.APIClient.list_models","text":"Lists available models.\n\nParams:\n\nauth_token::String (required)\napi_version::String (required)\n\nReturn: Vector{ModelData}, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"}]
}
